// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole  @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  requests  Request[]
  payments  Payment[] @relation("UserPayments") // Add a relation name
}

model Payment {
  id         Int           @id @default(autoincrement())
  requestId  Int
  userId     Int            // Add this field to reference `User`
  amount     Decimal
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  request    Request       @relation(fields: [requestId], references: [id])
  user       User          @relation("UserPayments", fields: [userId], references: [id]) // Add the opposite relation
}


enum UserRole {
  SERVICE_PROVIDER
  SERVICE_SEEKER
  AGENT
  ADMIN
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  category    String
  price       Decimal
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  requests    Request[]
}

model Request {
  id         Int          @id @default(autoincrement())
  serviceId  Int
  userId     Int
  status     RequestStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  service    Service      @relation(fields: [serviceId], references: [id])
  user       User         @relation(fields: [userId], references: [id])
  payments   Payment[]
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}


enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}