generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SERVICE_SEEKER
  AGENT
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  UNPAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String?
  lastname  String?
  email     String   @unique
  phone     String?
  password  String
  role      UserRole @default(SERVICE_SEEKER)

  location_province String?
  location_district String?
  location_sector   String?

  requestsAsClient  Request[]         @relation("ClientRequests")
  requestsAsAgent   Request[]         @relation("AgentRequests")
  approvedProviders ServiceProvider[] @relation("ApprovedBy")
  payments          Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String
  email     String @unique
  phone     String

  location_province String?
  location_district String?
  location_sector   String?

  requests Request[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceProvider {
  id                Int     @id @default(autoincrement())
  firstname         String
  lastname          String
  email             String  @unique
  work_email        String?
  phone             String
  description       String?
  experience        String?
  location_province String
  location_district String
  location_sector   String
  location_serve    String?
  additional_info   String?

  service_category_id Int
  service_category    ServiceCategory @relation(fields: [service_category_id], references: [id])

  approved    Boolean @default(false)
  approved_by Int?
  admin       User?   @relation("ApprovedBy", fields: [approved_by], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceCategory {
  id             Int     @id @default(autoincrement())
  name           String
  provider_price Decimal
  client_price   Decimal
  details        String

  service_providers ServiceProvider[]
  requests          Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Request {
  id               Int           @id @default(autoincrement())
  your_location    String
  service_location String
  service_date     String
  description      String
  status           RequestStatus @default(PENDING)

  client_id           Int
  service_category_id Int
  agent_id            Int?

  client           User            @relation("ClientRequests", fields: [client_id], references: [id])
  service_category ServiceCategory @relation(fields: [service_category_id], references: [id])
  agent            User?           @relation("AgentRequests", fields: [agent_id], references: [id])

  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?
}

model Payment {
  id        Int           @id @default(autoincrement())
  requestId Int
  amount    Decimal
  status    PaymentStatus @default(PENDING)

  request   Request @relation(fields: [requestId], references: [id])
  client    Client  @relation(fields: [client_id], references: [id])
  client_id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
