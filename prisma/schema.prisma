generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  firstname         String?
  lastname          String?
  email             String            @unique
  phone             String?
  password          String
  role              UserRole          @default(AGENT)
  isSuperAgent      Boolean           @default(false)
  added_service_providers ServiceProvider[] @relation("AddedByAgent")
  location_province String?
  location_district String?
  location_sector   String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  payments          Payment[]
  requestsAsAgent   Request[]         @relation("AgentRequests")
  approvedProviders ServiceProvider[] @relation("ApprovedBy")
  profileImage  String?
  nationalIdImage String?

  created_agents    User[]            @relation("AgentCreation")
  created_by        User?             @relation("AgentCreation", fields: [created_by_id], references: [id])
  created_by_id     Int?
}

model Client {
  id                Int       @id @default(autoincrement())
  firstname         String
  lastname          String
  email             String?    
  phone             String
  location_province String?
  location_district String?
  location_sector   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  payments          Payment[]
  requests          Request[] @relation("ClientRequests")
}

model ServiceProvider {
  id                  Int             @id @default(autoincrement())
  firstname           String
  lastname            String
  email               String          @unique
  work_email          String?
  phone               String
  description         String?
  experience          String?
  location_province   String
  location_district   String
  location_sector     String
  location_serve      String?
  additional_info     String?
  provinces           String?
  districts           String?
  total_district_cost Decimal?        @default(0.0)
  status            String @default("PENDING")
  transaction_id    String? @unique
  service_category_id Int
  approved            Boolean         @default(true)
  approved_by         Int?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  added_by    Int?
  added_by_agent User? @relation("AddedByAgent", fields: [added_by], references: [id])
  
  admin               User?           @relation("ApprovedBy", fields: [approved_by], references: [id])
  service_category    ServiceCategory @relation(fields: [service_category_id], references: [id])

  @@index([approved_by], map: "ServiceProvider_approved_by_fkey")
  @@index([service_category_id], map: "ServiceProvider_service_category_id_fkey")
}

model ServiceCategory {
  id             Int     @id @default(autoincrement())
  name           String
  details        String
  fields         Json?
  createdAt           DateTime        @default(now())
   
  service_providers ServiceProvider[]
  requests          Request[]
}


model Request {
  id                 Int            @id @default(autoincrement())
  your_location      String
  service_location   String
  service_date       String
  fields             Json?
  status             String         @default("PENDING")
  client_id          Int
  service_category_id Int
  agent_id           Int?
  message_preference MessagePreference @default(EMAIL)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  payments           Payment[]
  agent              User?           @relation("AgentRequests", fields: [agent_id], references: [id])
  client             Client          @relation("ClientRequests", fields: [client_id], references: [id])
  service_category   ServiceCategory @relation(fields: [service_category_id], references: [id])

  @@index([agent_id], map: "Request_agent_id_fkey")
  @@index([client_id], map: "Request_client_id_fkey")
  @@index([service_category_id], map: "Request_service_category_id_fkey")
}

enum MessagePreference {
  EMAIL
  SMS
  BOTH
}

model Payment {
  id                     Int      @id @default(autoincrement())
  requestId              Int
  amount                 Decimal
  phone_number           String?
  transaction_id         String   @unique
  request_transaction_id String?
  status                 String   @default("PENDING")
  client_id              Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  userId                 Int?
  client                 Client   @relation(fields: [client_id], references: [id])
  request                Request  @relation(fields: [requestId], references: [id])
  User                   User?    @relation(fields: [userId], references: [id])

  @@index([client_id], map: "Payment_client_id_fkey")
  @@index([requestId], map: "Payment_requestId_fkey")
  @@index([userId], map: "Payment_userId_fkey")
}

enum UserRole {
  AGENT
  ADMIN
  OPERATIONS
  CUSTOMER_SUPPORT
}


model Settings{
   id                     Int      @id @default(autoincrement())
  client_price    Int @default(2000)
  provider_price   Int @default(3000)
  support_email  String @default("support@topinfo.rw")
}